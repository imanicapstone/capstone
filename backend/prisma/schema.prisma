// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                @id @default(cuid())
  email             String                @unique
  password          String
  
  profile           UserProfile?          @relation("UserProfile")
  sensitiveData     UserSensitiveData?    @relation("UserSensitiveData")
  financialRecords  FinancialData[]       @relation("FinancialData")      
  transactions      Transaction[]         @relation("UserTransactions")
  notifications     Notification[]        @relation("Notification")
}

model UserProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation("UserProfile", fields: [userId], references: [id])

  ageRange  String?
  gender    String?
  occupation  String?
}

model UserSensitiveData {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation("UserSensitiveData", fields: [userId], references: [id])

  salary    Float
}

model FinancialData {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation("FinancialData", fields: [userId], references: [id])

  category    String
  amount      Float
  date        DateTime
}

model Transaction {
  id              String    @id @default(cuid())
  userId          String    
  user            User      @relation("Transaction", fields: [userId], references: [id])

  amount          Float
  type            TransactionType
  category        String
  description     String?
  date            DateTime

  merchant        String?
  location        String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Notification {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation("Notification", fields: [userId], references: [id])

  title       String
  message     String
  type        NotificationType
  status      NotificationStatus

  createdAt   DateTime  @default(now())
  readAt      DateTime? // null if unread
  expiresAt   DateTime? 

}

enum NotificationType {
  ALERT 
  REMINDER 
  INSIGHT
  GENERAL 
}

enum NotificationStatus {
  UNREAD 
  READ 
}

enum TransactionType {
    INCOME 
    EXPENSE
}